#include "stdafx.h"
#include "stauffer.h"

#define _USE_MATH_DEFINES

#include <cmath>
#include <cstdlib>

typedef unsigned char BYTE;

CMultimodalPixelModel::CMultimodalPixelModel(int nProcWidth, int nProcHeight, int nK, double dbRange, double dbAlpha, double dbT)
						: m_nProcWidth(nProcWidth), m_nProcHeight(nProcHeight), m_nK(nK), m_dbRange(dbRange), m_dbAlpha(dbAlpha), m_dbT(dbT)
{
	NormalDistribution initialModel;
	_TNormalDistributions normalDistributions;
	double dbDeviationInit = m_dbRange / (5.0 * m_nK);  // initially, all distributions have equal standard deviation
														// and they are next to each other and span entire range of input pixel values
	initialModel.uk = 2.5 * dbDeviationInit; 
	// initialModel.wk = 1.0 / m_nK;
	initialModel.wk = 0.05;
	initialModel.vark = 36.0;
	initialModel.backgroundLikelihood = (initialModel.wk * initialModel.wk) / initialModel.vark;
	for (int i = 0; i < m_nK; i++)
	{
		normalDistributions.push_back(initialModel);
		initialModel.uk += (5.0 * dbDeviationInit); 		
	}
	m_frameModel.assign(m_nProcHeight * m_nProcWidth, normalDistributions);
}

double CMultimodalPixelModel::setAlpha(double dbAlpha)
{
	double ret = m_dbAlpha;
	m_dbAlpha = dbAlpha;
	return ret;
}

double CMultimodalPixelModel::setT(double dbT)
{
	double ret = m_dbT;
	m_dbT = dbT;
	return ret;
}

bool CMultimodalPixelModel::classifyPixel(_TNormalDistributions &normalDistributions, double pixelValue)
{
	
	bool bIsMatched = false;
	double dbAccWeights = 0;
	_TNormalDistributions::iterator iterMatchedPosition;
	_TNormalDistributions::iterator iter1;
	iter1 = normalDistributions.begin();
	for (iter1 = normalDistributions.begin(); iter1 != normalDistributions.end(); iter1++ )
	{
		double dbDistance = (iter1->uk - pixelValue);
		dbDistance = dbDistance * dbDistance;
		(iter1->wk) *= (1 - m_dbAlpha);
		if ((dbDistance < 6.25 * (iter1->vark)) && (!bIsMatched))
		{
			(iter1->wk) += m_dbAlpha;
			bIsMatched = true;
			iterMatchedPosition = iter1;
		}
		dbAccWeights += iter1->wk;
	}
	if (!bIsMatched)
	{	
		iter1 = normalDistributions.end() - 1 ;
		iterMatchedPosition = iter1; 
		iter1->uk = pixelValue;
		iter1->vark = 36.0;
		dbAccWeights -= iter1->wk;
		iter1->wk = 0.05;
		dbAccWeights += iter1->wk;
	}
	else
	{
		
		double dbRho = (m_dbAlpha / sqrt(2 * M_PI * (iterMatchedPosition->vark))) * 
				exp(-(iterMatchedPosition->uk - pixelValue)*(iterMatchedPosition->uk - pixelValue)
				/ (2 * (iterMatchedPosition->vark)));
		
		// double dbRho = (m_dbAlpha / iterMatchedPosition->wk);
		if (dbRho > 1)
			dbRho = 1;
		(iterMatchedPosition->uk) *= (1 - dbRho);
		(iterMatchedPosition->uk) += dbRho * pixelValue;
		(iterMatchedPosition->vark) *= (1 - dbRho);
		(iterMatchedPosition->vark) += dbRho * (iterMatchedPosition->uk - pixelValue) * (iterMatchedPosition->uk - pixelValue);
	}
	for (iter1 = normalDistributions.begin(); iter1 != normalDistributions.end(); iter1++ )
	{
		// iter1->wk /= dbAccWeights;
		iter1->backgroundLikelihood = (iter1->wk) * (iter1->wk) / (iter1->vark);
	}
	
	_TNormalDistributions::iterator iterPreviousPosition;
	
	for (iter1 = iterMatchedPosition; iter1 != normalDistributions.begin(); iter1-- )
	{
		iterPreviousPosition = iter1 - 1;	
		if (iter1->backgroundLikelihood > iterPreviousPosition->backgroundLikelihood)
		{
			NormalDistribution tmp = *iter1;
			*iter1 = *iterPreviousPosition;
			*iterPreviousPosition = tmp;
			iterMatchedPosition = iterPreviousPosition; 
		}
		else
			break;
	}
	double dbAccBackgroundLikelihoods = 0;
	for (iter1 = normalDistributions.begin(); iter1 != normalDistributions.end(); iter1++ )
	{
		dbAccBackgroundLikelihoods += (iter1->wk) / dbAccWeights;
		if (dbAccBackgroundLikelihoods >= m_dbT)
			break;
	}
	if (iter1 >= iterMatchedPosition)
		return false;
	else
		return true;
}

void CMultimodalPixelModel::frameSegmentation(IplImage *imgInputFrame_32SC1, IplImage *imgForeground_8UC1)
{
	BYTE *pbyInputFrame = (BYTE *) imgInputFrame_32SC1->imageData;
	BYTE *pbyInputFrameEnd = pbyInputFrame + imgInputFrame_32SC1->height * imgInputFrame_32SC1->width;
	BYTE *pbyForeground = (BYTE *) imgForeground_8UC1->imageData;
	vector<_TNormalDistributions>::iterator iterModel = m_frameModel.begin();

	// Principal iteration loop, until target pointer reaches the final line
	while(pbyInputFrame < pbyInputFrameEnd)
	{
		if (classifyPixel(*(iterModel++),(double) *(pbyInputFrame++)))
			*(pbyForeground++) = 1;
		else
			*(pbyForeground++) = 0;
	}
}