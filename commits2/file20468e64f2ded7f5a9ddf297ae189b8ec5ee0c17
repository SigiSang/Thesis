// antic2.cpp : Defines the entry point for the console application.
//



/******************************************************************************
  File:			expvision.cpp
  Copyright:    Copyright (C) 2006 Borislav Antic. 
                All Rights reserved.

				The  copyright  to  all  material   contained   in   this   and
				accompanying  files  including without limitation  the computer
				program(s)  contained   herein  is  the  property  of   authors
				The program(s) may  be used  and/or  copied only with the 
				written permission  from the copyright holder and in  accordance
				with  terms  and  conditions  under  which  the program(s) have
				been supplied.
******************************************************************************/

// expvision.cpp :	Glavna funkcija za testiranje klasa koje implementiraju 
//					detekciju pokretnih objekata
//

#include "stdafx.h"
#include "antic2.h"
#include "cv.h"
#include "highgui.h"


#ifdef _DEBUG
#define new DEBUG_NEW
#endif

// The one and only application object

CWinApp theApp;

using namespace std;

// Globalna promenljiva koja cuva vrednost klizaca 
int bckthold = 5;

/*
// callback funkcija koja se poziva kada se promeni polozaj klizaca   
void Testing(int pos)   
{
	m_pMotionSegmentation->setBackgroundThreshold(3.5 + (pos - 5)/5.0);

}  
*/

// funkcija koja konstruise objekte klasa koje implementiraju izdvajanje pokretnih objekata 
void Initialize(CvSize imSize)
{
	// m_pMotionSegmentation je objekat klase CMotionSegmentation koja odgovara nasem algoritmu za segmentaciju
	// m_pMotionSegmentation = new CMotionSegmentation(imSize.width, imSize.height, 100, 2.0, 9, 10, 180, 3.5, 0.01, 1.5, 0, 0);
	
	// m_pMultimodalPixelModel je objekat klase CMultimodalPixelModel koja odgovara Stauffer-Grimson
	// algoritmu za segmentaciju
	m_pMultimodalPixelModel = new CMultimodalPixelModel(imSize.width, imSize.height, 3, 255, 0.01, 0.5);
}

int _tmain(int argc, TCHAR* argv[], TCHAR* envp[])
{
	int nRetCode = 0;
	int m_lSampleCounter = 0;

	// initialize MFC and print and error on failure
	if (!AfxWinInit(::GetModuleHandle(NULL), NULL, ::GetCommandLine(), 0))
	{
		// TODO: change error code to suit your needs
		_tprintf(_T("Fatal Error: MFC initialization failed\n"));
		nRetCode = 1;
	}
	else
	{
		// TODO: code your application's behavior here.
		
		CvCapture* capture = 0;

		if( argc == 1 || (argc == 2 && _tcslen(argv[1]) == 1 && isdigit(argv[1][0])))
			// grebovanje frejmova ide direktno sa kamere, ako nije prosledjen nijedan 
			// parametar sa komandne linije
			capture = cvCaptureFromCAM( argc == 2 ? argv[1][0] - '0' : 0 );
		else if( argc == 2 )
			// grebovanje frejmova ide iz fajla, cije ime je prosledjeno kao parametar 
			// preko komandne linije
			capture = cvCaptureFromAVI(argv[1]);  

		// ako grebovanje nije uspelo
		if( !capture )
		{
			fprintf(stderr,"Could not initialize capturing...\n");
			return -1;
		}

		
		// generisu se tri izlazna prozora
		// cvNamedWindow( "Input", 0 );
		cvNamedWindow( "Foreground", 0);
		// cvNamedWindow( "Background", 0);	

		CvSize imSize;
		
		// imForeground,... su promenljive u kojima se cuva trenutni frejm nakon grebovanja 
		IplImage* imForeground = 0;
		IplImage* imForegroundFiltered = 0;
		IplImage* imForegroundColor = 0;
		IplImage* imForeground3Channel = 0;
		IplImage* imBackground = 0;	
		IplImage* imInputGray = 0;
		IplImage* imJointView = 0;

		// m_pmatTmp1_8UC1  je pomocna struktura za morfolosko filtriranje
		CvMat* m_pmatTmp1_8UC1 = 0;

		CvVideoWriter* writer = 0;

		

		// petlja u kojoj se vrsi obrada frejmova iz ulaznog toka
		for(;;)
		{
			IplImage* imInput = 0;

			// grebovanje frejma iz izvora capture 			
			imInput = cvQueryFrame( capture );

			// ukoliko je kraj toka, ili neki drugi problem, petlja se prekida
			if( !imInput )
				break;
			
			// odredjuje dimenzije frejma
			imSize = cvGetSize(imInput);

			// ukoliko je ovo prvi frejm ili ukoliko su dimenzije novog frejma drugacije od prethodnih
			// konstruisu se nove strukture za cuvanje frejma, pozadine i prednjeg plana
			if(!imForeground || imForeground->height != imSize.height || imForeground->width != imSize.width)
			{
				Initialize(imSize);
				imForeground = cvCreateImage(imSize, 8, 1);
				imForegroundFiltered = cvCreateImage(imSize, 8, 1);
				imForegroundColor = cvCreateImage(imSize, 8, 3);
				imBackground = cvCreateImage(imSize, 8, 1);
				imInputGray = cvCreateImage(imSize, 8, 1);
				m_pmatTmp1_8UC1 = cvCreateMat(imSize.height, imSize.width, CV_8UC1);
				imJointView = cvCreateImage(cvSize(2 * imSize.width,imSize.height) , 8, 3);
				writer = cvCreateVideoWriter( "demo.avi", -1, 15, cvSize(2 * imSize.width,imSize.height) );
			}
		
			
			
			// m_lSampleCounter je brojac frejmova, koji se inkrementira svakim novim frejmom
			++m_lSampleCounter; 
			
			// prikaz izvornog frejma u koloru
			// cvShowImage( "Input", imInput);	

			cvSetImageROI(imJointView, cvRect(0,0,imSize.width, imSize.height));
			cvCopy(imInput, imJointView);
			cvResetImageROI(imJointView);


			// cvCreateTrackbar("Threshold","Input",&bckthold,10,Testing);					
			
			// konverzija izvornog frejma iz kolor oblika u crno-beli oblik
			cvCvtColor(imInput, imInputGray, CV_RGB2GRAY);
			
			// poziv metode za obradu crno-belog izvornog frejma na bazi naseg algoritma
			// m_pMotionSegmentation->updateState(m_lSampleCounter, imInputGray, imBackground, imForeground);
			
			// poziv metode za obradu crno-belog izvornog frejma na bazi Stauffer-Grimsonovog algoritma
			m_pMultimodalPixelModel->frameSegmentation(imInputGray, imForeground);
	
			// podesavanje koordinatnog pocetka za sliku pozadine i prednjeg plana
			imBackground->origin = imInput->origin;
			imForeground->origin = imInput->origin;
			imForegroundColor->origin = imInput->origin;
			imJointView->origin = imInput->origin;
			
			
			// m_pstrelMorphology  je kernel dimenzija 3x3 za morfolosko filtriranje
			IplConvKernel *m_pstrelMorphology = cvCreateStructuringElementEx(3, 3, 1, 1, CV_SHAPE_RECT, 0);
	
			// slika prednjeg plana se morfoloski filtrira MEDIAN operacijom, pri cemu je velicina prozora 7x7
			cvSmooth( imForeground, imForegroundFiltered, CV_MEDIAN,7);

			// nakon morfoloskog filtriranja se zadrzavaju samo promene 0->1 (slika prednjeg plana je BW slika)
			cvOr( imForeground, imForegroundFiltered, imForeground);

			// primenjuje se jos jedna morfoloska operacija na slici prednjeg plana. Ovog puta je to OPEN operacija
			cvMorphologyEx( imForeground, imForeground, m_pmatTmp1_8UC1,m_pstrelMorphology, CV_MOP_OPEN, 1);

			// slika prednjeg plana prozorira izvornu crno-belu sliku da bi se dobili pokretni objekti
			cvMul(imInputGray,imForeground,imForeground);


			cvCopy(imInput, imForegroundColor);

			

			cvSet( imForegroundColor, cvScalar(255,255,0), imForeground  );

			cvSetImageROI(imJointView, cvRect(imSize.width,0,imSize.width, imSize.height));
			cvCopy(imForegroundColor, imJointView);
			cvResetImageROI(imJointView);
			
			// prikaz slike sa izdvojenim pokretnim objektima
			cvShowImage("Foreground", imJointView );

			cvWriteFrame( writer, imJointView  );

			// prikaz slike pozadine
			// cvShowImage("Background", imBackground );

			// ako se unese karakter ESC program prekida sa radom
			if( cvWaitKey(10) >= 0 )
				break;
			
		}

		cvWaitKey(0); // very important, contains event processing loop inside		

		// oslobadja se memorija 
		cvReleaseCapture( &capture );
		cvDestroyWindow("Input");
		cvDestroyWindow("Foreground");
		cvDestroyWindow("Background");

		// delete m_pMotionSegmentation;
		delete m_pMultimodalPixelModel;

		cvReleaseMat(&m_pmatTmp1_8UC1);

		cvReleaseVideoWriter( &writer);

		return 0;


	}

	return nRetCode;
}
