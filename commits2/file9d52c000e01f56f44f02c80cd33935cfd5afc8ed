#include <opencv/cvaux.h>
#include <opencv/highgui.h>
#include "wavelet.h"
#include "tools.h"
#include "wf.h"
#include "mme.h"
#include "avi.h"
#include "sf.h"
#include "noiseest.h"
#include <time.h>
#define MAX_BUFFER_SIZE 200
#define WDW 0.25
#define WMW 4.


double getTime(){
        time_t t;
        time(&t);
        double x=(double)t;
        return x;
}

double __HWTIME=0;

void tic(){
        __HWTIME=getTime();
}

void toc(){
        double x=getTime();
        double diff=x-__HWTIME;
        cout <<"\n-->" << diff << " seconds elapsed"<<endl;
        __HWTIME=x;
}

void Frame2Array(IplImage* image, double* LL, int chan)
{
	int origwidth = image->width;
	int origheight = image->height;
	int width = image->width;
	int height = image->height;	
	for (int yy=0; yy<height; yy++)
	{
		for (int xx=0; xx<width; xx++)
		{	
			int x = xx;			
			int y = yy;
			CvScalar p = cvGet2D(image, y, x);
			double R = p.val[chan];
			LL [yy*width + xx] = (double)((int)(R));
		}
	}
}

void Frame2IArray(IplImage* image, int* LL, int chan)
{
	int origwidth = image->width;
	int origheight = image->height;
	int width = image->width;
	int height = image->height;	
	for (int yy=0; yy<height; yy++)
	{
		for (int xx=0; xx<width; xx++)
		{	
			int x = xx;			
			int y = yy;
			CvScalar p = cvGet2D(image, y, x);
			double R = p.val[chan];
			LL [yy*width + xx] = (int)(R);
		}
	}
}

void Sqr2Frame(IplImage* image, IplImage* oimage)
{
	for (int yy=0; yy<image->height; yy++)
	{
		for (int xx=0; xx<image->width; xx++)
		{		
			CvScalar q,p = cvGet2D(image, yy, xx);
			q.val[0]=sqrt(p.val[0]);
			q.val[1]=sqrt(p.val[1]);
			q.val[2]=sqrt(p.val[2]);
			cvSet2D(oimage,yy,xx,q);
		}
	}
}

void SqrdFrame(double* in, double* oim, int width, int height)
{
	for (int yy=0; yy<height; yy++)
	{
		for (int xx=0; xx<width; xx++)
		{
			oim [yy*width + xx]=pow(in[yy*width + xx]/16.,2.);			
		}
	}
}

int main(int argc, char **argv){

  int nframes = 0; 
   
   char *avi_in = argv[1];       // input noisy video avi file
   char *avi_orig = argv[2];       // original avi file
   char *avi_outT = argv[3];       // temporal filtered video avi file
   char *avi_outST = argv[4];       // spatio-temporal filtered video avi file
   sscanf(argv[5],"%d",&nframes); //number of frames to be processed
   /* TR START *
   char *filename1 = argv[6];
   char *filename2 = argv[7];  
   char *filename3 = argv[8]; 
   /* TR END */

   FILE *fp,*fp2,*fp3,*fp5; // Uses disabled

   /* TR START *
   FILE *fp = fopen(filename1,"w"); 
   FILE *fpp = fopen(filename2,"w"); // temporal filter
   FILE *fppp = fopen(filename3,"w"); // spatio-temporal filter

   FILE *fp1 = fopen("hist_mad_ver_bn.dat","w"); // histogram of MAD values versus block number for one frame
   FILE *fp2 = fopen("pdf.dat","w");
   FILE *fp5 = fopen("alpha.dat","w");
   FILE *fMSE = fopen("fMSE.dat","w");
   FILE *fSM = fopen("fSM.dat","w");
   /* TR END */

   FILE *fpLap_p = fopen("Lap_p.dat","r"); // for the DEN_link alg
   FILE *fpLap_kurtosis = fopen("Lap_kurtosis.dat","r"); //  for the DEN_link alg

   /* TR START *
   FILE *fp3 = fopen("histogram.dat","w"); // for noise estimation
   FILE *fp4 = fopen("ARAM.dat","w"); // average RAM per frame

   FILE *flum = fopen("PSNR_lum.dat","w"); // average RAM per frame
    
   FILE *fp_ram = fopen("ram_hist.dat","w"); // average RAM per frame
   /* TR END*/

  double *Lap_p = new double[MAX_BUFFER_SIZE];
  double *Lap_kurtosis = new double[MAX_BUFFER_SIZE];
  float temp;

  int numb=0,numbk=0; // counters of the size of table array
  ////////////////////////////////////////////////////////
  //OpenCV
  CvCapture *noisy_video = cvCaptureFromFile(argv[1]); 
  if (noisy_video == NULL)
  {
    fprintf(stderr, "Error: Can't open left video.\n");
	return -1;
  } 
  CvCapture *nfree_video = cvCaptureFromFile(argv[2]); 
  if (noisy_video == NULL)
  {
    fprintf(stderr, "Error: Can't open left video.\n");
	return -1;
  } 
  CvSize frame_size, msize;
  frame_size.height = (int) cvGetCaptureProperty(noisy_video, CV_CAP_PROP_FRAME_HEIGHT);
  frame_size.width = (int) cvGetCaptureProperty(noisy_video, CV_CAP_PROP_FRAME_WIDTH);
  long nfr = (int) cvGetCaptureProperty(noisy_video, CV_CAP_PROP_FRAME_COUNT);
  int fps = (int) cvGetCaptureProperty(noisy_video, CV_CAP_PROP_FPS);
  IplImage *nframe = cvCreateImage(frame_size, IPL_DEPTH_32F, 3);
  IplImage *rframe = cvCreateImage(frame_size, IPL_DEPTH_32F, 3);
  IplImage *cframe = cvCreateImage(frame_size, IPL_DEPTH_32F, 3);
  IplImage *pframe = cvCreateImage(frame_size, IPL_DEPTH_32F, 3);
  cvNamedWindow("Nv", 0);
  cvNamedWindow("Diff", 0);
  printf("Frames: %li\n",nfr);
  //////////////////////////////////////////////////////////
  //////////////////////////////////////////////////////////

  if (fpLap_p == NULL)        { cout<<"Can't open file Lap_p.dat"<<endl; exit(1);}
  if (fpLap_kurtosis == NULL) { cout<<"Can't open file Lap_kurtosis.dat"<<endl; exit(1);}

             while(fscanf(fpLap_p,"%f",&temp)!=EOF) { Lap_p[numb] = (double)temp; numb++;}
                      // putting the data from the file into an array
             while(fscanf(fpLap_kurtosis,"%f",&temp)!=EOF)  { Lap_kurtosis[numbk] = (double)temp;numbk++;} 
                     // putting the data from the file into an array

    tAVI_RGB seq_in,seq_outST,seq_orig,seq_outT,seq_mv,seq_dif,seq_ll,seq_lh,seq_hl,seq_hh,seq_ll2,seq_lh2,seq_hl2,seq_hh2,
             seq_llU,seq_lhU,seq_hlU,seq_hhU,seq_ll2U,seq_lh2U,seq_hl2U,seq_hh2U,
             seq_llV,seq_lhV,seq_hlV,seq_hhV,seq_ll2V,seq_lh2V,seq_hl2V,seq_hh2V;
  
   // seq_in.Read(avi_in);    // reading input sequence into buffer      
   // seq_orig.Read(avi_orig); // reading orinal sequence into buffer

     if(nframes == 0) nframes = seq_in.GetNumberOfFrames();
   
     int width  =  frame_size.width;
     int height =  frame_size.height;

     cout<<width<<"\t"<<height<<endl;   

      double PSNR_LUM,AVPSNR = 0.;  // average PSNR over all frames
      double *PSNR   = (double *) malloc (nframes*sizeof(double)); // PSNR per frame
      double *PSNRT   = (double *) malloc (nframes*sizeof(double)); // PSNR per frame
      double lambda;

	  double *MSE=(double *) malloc(nframes*sizeof(double));       
      double MSES = 0.;
	  double *SM=(double *) malloc (nframes*sizeof(double));       
      double SMA = 0.;
	  int s;
	  double Variance,amot,sigma,sigmaM,sigmaU,sigmaMU,sigmaV,sigmaMV,THR,thrhl,thrlh,thrhh,sigmaAI,sigmaAII;

     tFrame* frame_in;      //   input frames seq
     tFrame* frame_orig;    //   original frames seq (t)
     tFrame* frame_orig_pr;    //   original frames seq (t-1)

     tFrame* frame_tf = new tFrame(width,height);     //   output-Spatial frames seq
     tFrame* frame_stf = new tFrame(width,height);     //   output-Temporal+Spatial frames seq

     tFrame* frame_outY = new tFrame(width,height);  // luminance
     tFrame* frame_origY = new tFrame(width,height);  // original luminance

     tFrame* frame_mv = new tFrame(width,height);     //   output-Spatial frames seq
     tFrame* frame_dif = new tFrame(width,height);     //   output-Temporal+Spatial frames seq

     tFrame* frame_hh = new tFrame(width,height);    
     tFrame* frame_hl = new tFrame(width,height);
     tFrame* frame_lh = new tFrame(width,height);   
     tFrame* frame_ll = new tFrame(width,height); 

     tFrame* frame_hh2 = new tFrame(width,height);    
     tFrame* frame_lh2 = new tFrame(width,height);
     tFrame* frame_hl2 = new tFrame(width,height);   
     tFrame* frame_ll2 = new tFrame(width,height);

     tFrame* frame_hhU = new tFrame(width/2,height/2);    
     tFrame* frame_hlU = new tFrame(width/2,height/2);
     tFrame* frame_lhU = new tFrame(width/2,height/2);   
     tFrame* frame_llU = new tFrame(width/2,height/2); 

     tFrame* frame_hhV = new tFrame(width/2,height/2);    
     tFrame* frame_hlV = new tFrame(width/2,height/2);
     tFrame* frame_lhV = new tFrame(width/2,height/2);   
     tFrame* frame_llV = new tFrame(width/2,height/2); 

     seq_outST.Write(avi_outST,nframes,width,height);
     seq_mv.Write("mvf.avi",nframes,width,height);
     
        cout<<"Reading frames..."<<endl;

        int NX = width/BS;                                // number of blocks in normal-resolution in horizontal direction
        int NY = height/BS;                               // number of blocks in normal-resolution in vertical direction
        int HW = NX*NY;                                     // total numbers of blocks in the normal-resolution frame

             cout<<NX<<"\t"<<NY<<endl;

         V2D *D = new V2D[NX*NY];	//  motion vectors for blocks

           for(int s=0;s<NX*NY;s++) D[s].x = D[s].y = 0;	// initializing motion vectors 

/* TR START *
          double *RAM = new double[NX*NY];  // MAD using estimated vector
          double *ARAM = new double[nframes]; // average MAD over all block in the current frame with estimated vectors
          double AFRAM = 0.;  // average ARAM over all frames in the sequence
/* TR END */

	  double PSNRSW = 0.;
 
       double *madU0    = new double[NX*NY];  // MADU0 with zero vectors 
       double *madV0  = new double[NX*NY];    // MADV0 with zero vectors 
       double *madV  = new double[NX*NY];     // MADV with zero vectors
       double *madU  = new double[NX*NY];     // MADU with zero vectors 

       double *mad0    = new double[NX*NY]; // MAD with zero vectors 
       double *mad0LL  = new double[NX*NY]; // MADLL with zero vectors 
       double *mad0LH  = new double[NX*NY]; // MADLH with zero vectors
       double *mad0HL  = new double[NX*NY]; // MADHL with zero vectors 
       double *mad0HH  = new double[NX*NY]; // MADHH with zero vectors

      double *madLL  = new double[NX*NY]; // MADLL with estimated vectors 
      double *madLH  = new double[NX*NY]; // MADLH with estimated vectors 
      double *madHL  = new double[NX*NY]; // MADHL with estimated vectors 
      double *madHH  = new double[NX*NY]; // MADHH with estimated vectors 

      double *mad0LL2  = new double[NX*NY]; // MADLL with zero vectors 
      double *mad0LH2  = new double[NX*NY]; // MADLH with zero vectors
      double *mad0HL2  = new double[NX*NY]; // MADHL with zero vectors 
      double *mad0HH2  = new double[NX*NY]; // MADHH with zero vectors

      double *madLL2  = new double[NX*NY]; // MADLL with estimated vectors 
      double *madLH2  = new double[NX*NY]; // MADLH with estimated vectors 
      double *madHL2  = new double[NX*NY]; // MADHL with estimated vectors 
      double *madHH2  = new double[NX*NY]; // MADHH with estimated vectors

      double *madLLs  = new double[nframes]; // MADLL with zero vectors 
      double *madLHs  = new double[nframes]; // MADLH with zero vectors
      double *madHLs  = new double[nframes]; // MADHL with zero vectors 
      double *madHHs  = new double[nframes]; // MADHH with zero vectors

      double *madLL2s  = new double[nframes]; // MADLL with estimated vectors 
      double *madLH2s  = new double[nframes]; // MADLH with estimated vectors 
      double *madHL2s  = new double[nframes]; // MADHL with estimated vectors 
      double *madHH2s  = new double[nframes]; // MADHH with estimated vectors 

    for(int i=0;i<nframes;i++) madLLs[i] = madLHs[i] = madHLs[i] = madHHs[i] = madLL2s[i] = madLH2s[i] = madHL2s[i] = madHH2s[i] = 0.; 
    
     double *X = new double[width*height];  // buffer for current input frame - luminance (noisy sequence)
     double *U = new double[width*height/4]; 
     double *V = new double[width*height/4];
     double *XOP = new double[width*height]; 

     double *XO = new double[width*height];  // buffer for current input frame - luminance (original sequence)
     double *UO = new double[width*height/4]; 
     double *VO = new double[width*height/4];

     double *UP = new double[width*height/4]; 
     double *VP = new double[width*height/4];

     double *R = new double[width*height]; // RGB color space (noisy sequence)
     double *G = new double[width*height]; 
     double *B = new double[width*height]; 

     double *RO = new double[width*height]; // RGB color space (original sequence)
     double *GO = new double[width*height]; 
     double *BO = new double[width*height]; 

     int *XC = new int[width*height];  // buffer for current input frame
     int *XP = new int[width*height];  // buffer for current input frame

     double *UF = new double[width*height];  // buffer for current input frame
     double *VF = new double[width*height];  // buffer for current input frame

     double *UFO = new double[width*height];  // buffer for current input frame
     double *VFO = new double[width*height];  // buffer for current input frame

     double *UM = new double[width*height];  // buffer for current input frame
     double *VM = new double[width*height];  // buffer for current input frame 

     double *LLUF = new double[width*height];  // buffer for current input frame 
     double *LHUF = new double[width*height];  // buffer for current input frame
     double *HLUF = new double[width*height];  // buffer for current input frame
     double *HHUF = new double[width*height];  // buffer for current input frame
 
     double *LLVF = new double[width*height];  // buffer for current input frame 
     double *LHVF = new double[width*height];  // buffer for current input frame
     double *HLVF = new double[width*height];  // buffer for current input frame
     double *HHVF = new double[width*height];  // buffer for current input frame  

     double *LL = new double[width*height]; // buffer for current input LL band
     double *LH = new double[width*height]; // buffer for current input LH band
     double *HL = new double[width*height]; // buffer for current input HL band
     double *HH = new double[width*height]; // buffer for current input HH band
     double *LL2 = new double[width*height]; // buffer for current input LL band
     double *LH2 = new double[width*height]; // buffer for current input LH band
     double *HL2 = new double[width*height]; // buffer for current input HL band
     double *HH2 = new double[width*height]; // buffer for current input HH band

     double *LLV = new double[width*height/4]; // buffer for current input LL band
     double *LHV = new double[width*height/4]; // buffer for current input LH band
     double *HLV = new double[width*height/4]; // buffer for current input HL band
     double *HHV = new double[width*height/4]; // buffer for current input HH band
     double *LL2V = new double[width*height/4]; // buffer for current input LL band
     double *LH2V = new double[width*height/4]; // buffer for current input LH band
     double *HL2V = new double[width*height/4]; // buffer for current input HL band
     double *HH2V = new double[width*height/4]; // buffer for current input HH band

     double *LLU = new double[width*height/4]; // buffer for current input LL band
     double *LHU = new double[width*height/4]; // buffer for current input LH band
     double *HLU = new double[width*height/4]; // buffer for current input HL band
     double *HHU = new double[width*height/4]; // buffer for current input HH band
     double *LL2U = new double[width*height/4]; // buffer for current input LL band
     double *LH2U = new double[width*height/4]; // buffer for current input LH band
     double *HL2U = new double[width*height/4]; // buffer for current input HL band
     double *HH2U = new double[width*height/4]; // buffer for current input HH band

     double *LLVP = new double[width*height/4]; // buffer for current input LL band
     double *LHVP = new double[width*height/4]; // buffer for current input LH band
     double *HLVP = new double[width*height/4]; // buffer for current input HL band
     double *HHVP = new double[width*height/4]; // buffer for current input HH band
     double *LL2VP = new double[width*height/4]; // buffer for current input LL band
     double *LH2VP = new double[width*height/4]; // buffer for current input LH band
     double *HL2VP = new double[width*height/4]; // buffer for current input HL band
     double *HH2VP = new double[width*height/4]; // buffer for current input HH band

     double *LLUP = new double[width*height/4]; // buffer for current input LL band
     double *LHUP = new double[width*height/4]; // buffer for current input LH band
     double *HLUP = new double[width*height/4]; // buffer for current input HL band
     double *HHUP = new double[width*height/4]; // buffer for current input HH band
     double *LL2UP = new double[width*height/4]; // buffer for current input LL band
     double *LH2UP = new double[width*height/4]; // buffer for current input LH band
     double *HL2UP = new double[width*height/4]; // buffer for current input HL band
     double *HH2UP = new double[width*height/4]; // buffer for current input HH band 
   
     double *LLO = new double[width*height]; // buffer for current input LL band
     double *LHO = new double[width*height]; // buffer for current input LH band
     double *HLO = new double[width*height]; // buffer for current input HL band
     double *HHO = new double[width*height]; // buffer for current input HH band
     double *LL2O = new double[width*height]; // buffer for current input LL band
     double *LH2O = new double[width*height]; // buffer for current input LH band
     double *HL2O = new double[width*height]; // buffer for current input HL band
     double *HH2O = new double[width*height]; // buffer for current input HH band

     double *LLP = new double[width*height]; // buffer for current input LL band
     double *LHP = new double[width*height]; // buffer for current input LH band
     double *HLP = new double[width*height]; // buffer for current input HL band
     double *HHP = new double[width*height]; // buffer for current input HH band
     double *LLP2 = new double[width*height]; // buffer for current input LL band
     double *LHP2 = new double[width*height]; // buffer for current input LH band
     double *HLP2 = new double[width*height]; // buffer for current input HL band
     double *HHP2 = new double[width*height]; // buffer for current input HH band

     double *alphaI = new double[NX*NY];
     double *alphaII = new double[NX*NY]; 

     double *YS = new double[width*height]; // buffer for current output (processed frame) in the base domain
     double *YT = new double[width*height]; // buffer for current output (processed frame) in the base domain

     //************* MAIN LOOP ****************************************************//

     tic(); // Mark start of program, to be used for showing time ellapsed

        for(int i=0;i<nframes;i++){
                  /* TR START */
                  cout<<"Processing frame "<<i+1<<" of "<<nframes<<endl; /* TR END */
									///////////////////////////////////
									//OpenCV	
									nframe = cvQueryFrame(noisy_video);
									cframe = cvQueryFrame(nfree_video);	
									//Sqr2Frame(nframe, rframe);	
									//cvScale(rframe, nframe, 16.);
									cvShowImage("Nv", nframe);
									cvWaitKey(10);
									Frame2Array(nframe, R, 0);
									Frame2Array(nframe, G, 1);
									Frame2Array(nframe, B, 2);
									Frame2Array(cframe, RO, 0);
									Frame2Array(cframe, GO, 1);
									Frame2Array(cframe, BO, 2);
									cvSub(nframe,pframe,rframe);
									cvScale(rframe, rframe, 1./32.);
									cvShowImage("Diff", rframe);
									cvWaitKey(1); 
									///////////////////////////////////	
						  
    //                                frame_in = seq_in.ReadFrame(i);
    //                                frame_orig = seq_orig.ReadFrame(i);

    //                                if(i>0) frame_orig_pr = seq_orig.ReadFrame(i-1);

    //                                 CopyFrame(frame_in,frame_mv,width,height);
    //                                 //CopyFrame(frame_orig,frame_dif,width,height);

    //                            cout<<"frame: "<<i<<endl;

				//PutImageIntoArrayC(frame_in, B, width, height,0);
    //                            PutImageIntoArrayC(frame_in, G, width, height,1);
    //                            PutImageIntoArrayC(frame_in, R, width, height,2);

    //                            PutImageIntoArrayC(frame_orig, BO, width, height,0);
    //                            PutImageIntoArrayC(frame_orig, GO, width, height,1);
    //                            PutImageIntoArrayC(frame_orig, RO, width, height,2);

				Convert_RGBtoYUV(R,G,B,width,height,X,UF,VF); // X - luminance
                                Convert_RGBtoYUV(RO,GO,BO,width,height,XO,UFO,VFO); // X - luminance


    //************ DIRECT WAVELET TRANSFORM *****************************//

      Wavelet_Image_Transform(X,HH,HL,LH,LL,i,width,height,0);       // direct wavelet transform for first scale
      Wavelet_Image_Transform(LL,HH2,HL2,LH2,LL2,i,width,height,1);  // direct wavelet transform for second scale

       Wavelet_Image_Transform(UF,HHUF,HLUF,LHUF,LLUF,i,width,height,0);       // direct wavelet transform for first scale
       Wavelet_Image_Transform(VF,HHVF,HLVF,LHVF,LLVF,i,width,height,0);
    
          RenderingUV_spa(width,height,UF,VF,16.5,16.5);
          Subsample(UF,width,height,U); Subsample(VF,width,height,V);

       Wavelet_Image_Transform(U,HHU,HLU,LHU,LLU,i,width/2,height/2,0);
       Wavelet_Image_Transform(V,HHV,HLV,LHV,LLV,i,width/2,height/2,0);  // direct wavelet transform for second scale  

        //**************** Noise Estimation ***************************************//

                  sigma = NoiseEstimationW(LL,LH,HL,HH,width,height,i,fp3);

                  /* TR START (remove output clutter) *
                      cout<<"sigma["<<i<<"] = "<<sigma<<endl; /* TR END */
                      

                  if(i>0) sigmaM = (sigma+sigmaM)/2.;
                  else sigmaM = sigma;

       /* TR START *

		     sigmaU = NoiseEstimationW(LLUF,LHUF,HLUF,HHUF,width,height,i,fp3);
 
                          cout<<"sigmaU["<<i<<"] = "<<sigmaU<<endl;

                     sigmaV = NoiseEstimationW(LLVF,LHVF,HLVF,HHVF,width,height,i,fp3);  
  
                         cout<<"sigmaV["<<i<<"] = "<<sigmaV<<endl;  

		       if(i>0) sigmaMU = (sigmaU+sigmaMU)/2.;
		       else sigmaMU = sigma;
		       if(i>0) sigmaMV = (sigmaV+sigmaMV)/2.;
		       else sigmaMV = sigmaV;

			    sigmaM = 21; //sigma
		        sigmaMU = sigmaMV = 0.66*sigmaM; // 6.5;

                      cout<<"sigma["<<i<<"] = "<<sigmaM<<endl;
                     cout<<"sigmaU["<<i<<"] = "<<sigmaMU<<endl;
                     cout<<"sigmaV["<<i<<"] = "<<sigmaMV<<endl; 

        /* TR END */

               // ************* UNWRAPING COEFFIC.******************************** //

                      PutCoefficientsIRO(LL,width,height,1,1);
	              PutCoefficientsIRO(HL,width,height,6,1);
		      PutCoefficientsIRO(LH,width,height,1,6);
	              PutCoefficientsIRO(HH,width,height,6,6);

                      PutCoefficientsIRO(LL2,width,height,4,4);
                      PutCoefficientsIRO(HL2,width,height,13,4);
		      PutCoefficientsIRO(LH2,width,height,4,13);
	              PutCoefficientsIRO(HH2,width,height,13,13);

                        GetAD_Rescaled(frame_hh,HH,width,height); 
                        GetAD_Rescaled(frame_hl,HL,width,height); 
                        GetAD_Rescaled(frame_lh,LH,width,height); 
                        GetAD_Rescaled(frame_ll,LL,width,height); 
            
                        GetAD_Rescaled(frame_hh2,HH2,width,height); 
                        GetAD_Rescaled(frame_hl2,HL2,width,height); 
                        GetAD_Rescaled(frame_lh2,LH2,width,height); 
                        GetAD_Rescaled(frame_ll2,LL2,width,height); 

                         PutCoefficientsIRO(LLU,width/2,height/2,0,0);
	                 PutCoefficientsIRO(HLU,width/2,height/2,3,0);
		         PutCoefficientsIRO(LHU,width/2,height/2,0,3);
	                 PutCoefficientsIRO(HHU,width/2,height/2,3,3);

                       GetAD_Rescaled(frame_hhU,HHU,width/2,height/2); 
                        GetAD_Rescaled(frame_hlU,HLU,width/2,height/2); 
                        GetAD_Rescaled(frame_lhU,LHU,width/2,height/2); 
                        GetAD_Rescaled(frame_llU,U,width/2,height/2); 
            
                        PutCoefficientsIRO(LLV,width/2,height/2,0,0);
	                PutCoefficientsIRO(HLV,width/2,height/2,3,0);
		        PutCoefficientsIRO(LHV,width/2,height/2,0,3);
	                PutCoefficientsIRO(HHV,width/2,height/2,3,3);


                        GetAD_Rescaled(frame_hhV,HHV,width/2,height/2); 
                        GetAD_Rescaled(frame_hlV,HLV,width/2,height/2); 
                        GetAD_Rescaled(frame_lhV,LHV,width/2,height/2); 
                        GetAD_Rescaled(frame_llV,V,width/2,height/2); 

		       /************* PROCESSING STEP *******************************************/

			 if(i==0){

			  UpDateMemory(HH,HL,LH,LL,HHP,HLP,LHP,LLP,width,height); 
			  UpDateMemory(HH2,HL2,LH2,LL2,HHP2,HLP2,LHP2,LLP2,width,height);

                           UpDateMemory2(U,V,UP,VP,width/2,height/2); //storing
                           UpDateMemory2(LLU,LLV,LLUP,LLVP,width/2,height/2); //storing
                     	   UpDateMemory2(LHU,LHV,LHUP,LHVP,width/2,height/2); //storing
                           UpDateMemory2(HLU,HLV,HLUP,HLVP,width/2,height/2); //storing
                           UpDateMemory2(HHU,HHV,HHUP,HHVP,width/2,height/2); //storing
  
                           UpDateMemory2(XO,XO,XOP,XOP,width,height); 

			   SM[i] = 0;

			 }
			 else{

	      /*motion estimation and temporal filtering ************************************************/

			   Frame2IArray(nframe, XC, 0);
			   Frame2IArray(pframe, XP, 0);
			   //NormalFrameResolution(frame_orig,width,height,XC);
			   //NormalFrameResolution(frame_orig_pr,width,height,XP);
                    
			   /* TR START *
         ARAM[i] = 0.; /* TR END */

			   for(int r=0;r<NY;r++)
			     for(int q=0;q<NX;q++){
		   
			           s = r*NX + q;
					     
				   D[s] = SearchMotionVectorI(D,U,UP,LLU,LLUP,LHU,LHUP,HLU,HLUP,HHU,HHUP,V,VP,LLV,LLVP,
                                                              LHV,LHVP,HLV,HLVP,HHV,HHVP,
                                                              LL,LLP,HL,HLP,LH,LHP,HH,HHP,LL2,LLP2,HL2,HLP2,LH2,LHP2, 
							      HH2,HHP2,q,r,i,width,height,sigmaM,fp,fp2,frame_dif,madU0,madV0,
                                                              mad0LL,mad0LH,mad0HL,mad0HH,madLL,madLH,madHL,madHH,mad0LL2,mad0LH2,
                                                              mad0HL2,mad0HH2,madLL2,madLH2,madHL2,madHH2,madU,madV);

				   // if((i==4)&&(mad0LH[s]>1000)) cout<<s<<endl;
			     
			   madLLs[i]  += madLL[s];   madLHs[i] += madLH[s];   madHLs[i] += madHL[s];   madHHs[i] += madHH[s];
			   madLL2s[i] += madLL2[s]; madLH2s[i] += madLH2[s]; madHL2s[i] += madHL2[s]; madHH2s[i] += madHH2[s];

         /* TR START *
			   RAM[s] = MAD(XC,D[s],XP,q,r,i,width,height);/* TR END */

			   //if(i==13){ fprintf(fp1,"%3f \n",madLH[s]);

			   //if(madLH[s]>75) cout<<q<<"\t"<<r<<endl;   
			   //}

         /* TR START *
			       ARAM[i] += RAM[s];/* TR END */
			   
			   }//q,r

			   madLLs[i]  /= (NX*NY);  madLHs[i] /= (NX*NY);  madHLs[i] /= (NX*NY);   madHHs[i] /= (NX*NY);
			   madLL2s[i] /= (NX*NY); madLH2s[i] /= (NX*NY); madHL2s[i] /= (NX*NY);  madHH2s[i] /= (NX*NY);

         /* TR START (remove output clutter) *
			     cout<<madLLs[i]<<"\t"<<madLHs[i]<<"\t"<<madHLs[i]<<"\t"<<madHHs[i]<<endl; 
			     cout<<madLL2s[i]<<"\t"<<madLH2s[i]<<"\t"<<madHL2s[i]<<"\t"<<madHH2s[i]<<endl; 
          /* TR END */

        /* TR START *
		    ARAM[i] /= (NX*NY);

        fprintf(fp4,"%d %3f \n",i,madLHs[i]);   

		     AFRAM += ARAM[i]; /* TR END */

		      //PutRAM(frame_dif,RAM,width,height);
		    //PutAmplitudeOfTheMotion(frame_dif,D,width,height);  

		     PutMotionVectorsInFrame(frame_mv,D,width,height); // putting vectors into the frame for visual tracking

		     TempUpDateMemoryI(D,i,width,height,sigmaM,madLL,madLH,madHL,madHH,madLL2,madLH2,madHL2,madHH2,madU,madV,
		                LL,LH,HL,HH,LLP,LHP,HLP,HHP,LL2,LH2,HL2,HH2,LLP2,LHP2,HLP2,HHP2,U,UP,V,VP,fp5,alphaI,Variance);

	    UpDateMemory(HH,HL,LH,LL,HHP,HLP,LHP,LLP,width,height); //storing previously processed frame and for current temp-out frame
	    UpDateMemory(HH2,HL2,LH2,LL2,HHP2,HLP2,LHP2,LLP2,width,height); //storing

	    UpDateMemory2(U,V,UP,VP,width/2,height/2); //storing	    
            UpDateMemory2(XO,XO,XOP,XOP,width,height); 

                           UpDateMemory2(LLU,LLV,LLUP,LLVP,width/2,height/2); //storing
                     	   UpDateMemory2(LHU,LHV,LHUP,LHVP,width/2,height/2); //storing
                           UpDateMemory2(HLU,HLV,HLUP,HLVP,width/2,height/2); //storing
                           UpDateMemory2(HHU,HHV,HHUP,HHVP,width/2,height/2); //storing
 
			   SM[i] = Cal_smt(D,NX,NY);  

			 }//else
     
     //*********** WRAPING  BACK PROCESSED COEFFICIENTS********************************//

	              PutBackCoefficientsIRO(LL,width,height,1,1);
	              PutBackCoefficientsIRO(HL,width,height,6,1);
		      PutBackCoefficientsIRO(LH,width,height,1,6);
	              PutBackCoefficientsIRO(HH,width,height,6,6);
                      PutBackCoefficientsIRO(LL2,width,height,4,4);
                      PutBackCoefficientsIRO(HL2,width,height,13,4);
		      PutBackCoefficientsIRO(LH2,width,height,4,13);
	              PutBackCoefficientsIRO(HH2,width,height,13,13);

                      PutBackCoefficientsIRO(LLU,width/2,height/2,0,0);
	              PutBackCoefficientsIRO(HLU,width/2,height/2,3,0);
		      PutBackCoefficientsIRO(LHU,width/2,height/2,0,3);
	              PutBackCoefficientsIRO(HHU,width/2,height/2,3,3);

                      PutBackCoefficientsIRO(LLV,width/2,height/2,0,0);
	              PutBackCoefficientsIRO(HLV,width/2,height/2,3,0);
		      PutBackCoefficientsIRO(LHV,width/2,height/2,0,3);
	              PutBackCoefficientsIRO(HHV,width/2,height/2,3,3);
                 
   //**************** INVERSE WAVELET TRANSFORM ********************************//

       //Inverse_Wavelet_Image_Transform(LL,HH2,HL2,LH2,LL2,i,width,height,1);   // inverse wavelet transform for the second scale
       //Inverse_Wavelet_Image_Transform(YT,HH,HL,LH,LL,i,width,height,0);        // inverse wavelet transform for the first scale

			/**********************************************************************/
         
			      Upsample(U,width,height,UF); Upsample(V,width,height,VF);

			      // RenderingUV_spa(width,height,UF,VF,sigmaMU,sigmaMV);  
			  ///Subsample(UF,width,height,U); Subsample(VF,width,height,V);

							     //Convert_YUVtoRGB(R,G,B,width,height,YT,UF,VF);
							     //GetADC(frame_tf,R,G,B,width,height);

                    //*******************Spatial Filtering *********************************************// 

			//MultiplyCoefficients(LH,HL,HH,LH2,HL2,HH2,width,height,WDW); // devide by 4 to get less comp. for conv

			// sigmaAI = WDW*sigmaM*0.45; // scaling noise			 
			 
			//  rem_noise_GenLap(HL2,HL2O,sigmaAI,2,Lap_p,Lap_kurtosis,numb,width,height,WS,fp2);
			//  rem_noise_GenLap(LH2,LH2O,sigmaAI,2,Lap_p,Lap_kurtosis,numb,width,height,WS,fp2);
			//  rem_noise_GenLap(HH2,HH2O,sigmaAI,2,Lap_p,Lap_kurtosis,numb,width,height,WS,fp2); 
 
			//  rem_noise_GenLap(HL,HLO,sigmaAI,1,Lap_p,Lap_kurtosis,numb,width,height,WS,fp2);
			//  rem_noise_GenLap(LH,LHO,sigmaAI,1,Lap_p,Lap_kurtosis,numb,width,height,WS,fp2);
			//  rem_noise_GenLap(HH,HHO,sigmaAI,1,Lap_p,Lap_kurtosis,numb,width,height,WS,fp2);
			

			// MultiplyCoefficients(LHO,HLO,HHO,LH2O,HL2O,HH2O,width,height,WMW);

                  /****************************************************************************/
	    
		  Rendering_MADB(width,height,LH,HL,HH,madLH,madHL,madHH,madU,madV,NX,BS,1,sigma);        // spatial filtering 
		  Rendering_MADB(width,height,LH2,HL2,HH2,madLH2,madHL2,madHH2,madU,madV,NX,BS,1,sigma);  // spatial filtering
 
	       /*********************************************************************************************/

	      //SpaTempWA(HL,LH,HH,HL2,LH2,HH2,LL2,HLO,LHO,HHO,HL2O,LH2O,HH2O,LL2O,width,height,alphaI,alphaII,NX);

		  Mot_seq(D,width,height,UM,VM,NX);

	  Inverse_Wavelet_Image_Transform(LL,HH2,HL2,LH2,LL2,i,width,height,1);   // inverse wavelet transform for the second scale
          Inverse_Wavelet_Image_Transform(YS,HH,HL,LH,LL,i,width,height,0);        // inverse wavelet transform for the first scale

	  //GetAD(frame_outY,YS,width,height,0.);
                 GetAD(frame_origY,X,width,height,0.);

		 //Upsample(U,width,height,UF); Upsample(V,width,height,VF); 
	               Convert_YUVtoRGB(R,G,B,width,height,YS,UF,VF);
	               GetADC(frame_stf,B,G,R,width,height);

                       Convert_YUVtoRGB(R,G,B,width,height,YS,UM,VM);
	               GetADC(frame_outY,R,G,B,width,height);  
					PutMotionVectorsInFrame(frame_outY,D,width,height);  
		       //ErrorSequence(frame_outY,frame_orig,frame_tf,width,height);

		       MSE[i] = 10*log(MSE_COMP(XO,XOP,width,height,NX,D))/log(10.); 
                       /* TR START *
                       if(i>0) fprintf(fMSE,"%d \t %e \n",i,MSE[i]);/* TR END */
		       if(i>0) MSES += MSE[i];
                       /* TR START *
                       if(i>0) fprintf(fSM,"%d \t %e \n",i,SM[i]);/* TR END */

	       PSNR_LUM = Calulate_PSNR_A(YS,XO,width,height);  
   
          // PSNRT[i] = Calulate_PSNRC(frame_tf, frame_orig,width,height); if(i>0) AVPSNR += PSNR[i];
           //PSNR[i] = Calulate_PSNRC(frame_stf, frame_orig,width,height); if(i>0) AVPSNR += PSNR[i];

        if(i!=0) PSNRSW += PSNR[i];

     //cout<<"PSNR_LUM["<<i<<"]= "<<PSNR_LUM<<endl; 
     //cout<<"PSNRT["<<i<<"]= "<<PSNRT[i]<<endl;
     //cout<<"PSNR["<<i<<"]= "<<PSNR[i]<<endl;
     //cout<<"AVRAM["<<i<<"]= "<<ARAM[i]<<endl;
     //cout<<"MSE["<<i<<"]= "<<MSE[i]<<endl;
     //cout<<"SM["<<i<<"]= "<<SM[i]<<endl;

     SMA += SM[i];

        // fprintf(fpp,"%d \t %e \n",i,PSNR[i]);
         //fprintf(fppp,"%d \t %e \n",i,PSNRT[i]);
         //fprintf(flum,"%d \t %e \n",i,PSNR_LUM);
          

	   //seq_outT.WriteFrame(i,frame_tf); 
        seq_outST.WriteFrame(i,frame_stf); 
        seq_mv.WriteFrame(i,frame_outY); 
		pframe=cvCloneImage(nframe);
  }     
     MSES = MSES/(double)(nframes-1);
     SMA = SMA/(double)(nframes-1);

  toc(); // Mark end of program, print time ellapsed

   //*********************** END of MAIN LOOP ****************************************//

/* TR START (remove output clutter) *
   cout<<"Average PSNR is: "<<PSNRSW/(double)(nframes-1)<<endl; 
   cout<<"Average MSES_COMP = "<<MSES<<endl; 
   cout<<"Average SMA_AV = "<<SMA<<endl; 
   /* TR END */

   delete [] LL; delete [] LH; delete [] HL; delete [] HH; delete [] LL2; delete [] LH2; delete [] HL2; delete [] HH2;
   delete [] LLU; delete [] LHU; delete [] HLU; delete [] HHU; delete [] LL2U; delete [] LH2U; delete [] HL2U; delete [] HH2U;
   delete [] LLV; delete [] LHV; delete [] HLV; delete [] HHV; delete [] LL2V; delete [] LH2V; delete [] HL2V; delete [] HH2V;

   delete [] LLUF; delete [] LHUF; delete [] HLUF; delete [] HHUF;delete [] LLVF; delete [] LHVF; delete [] HLVF; delete [] HHVF;

   delete [] LLUP; delete [] LHUP; delete [] HLUP; delete [] HHUP; delete [] LL2UP; delete [] LH2UP; delete [] HL2UP; delete [] HH2UP;
   delete [] LLVP; delete [] LHVP; delete [] HLVP; delete [] HHVP; delete [] LL2VP; delete [] LH2VP; delete [] HL2VP; delete [] HH2VP;
   delete [] LLO;delete [] LHO;delete [] HLO;delete [] HHO;delete [] LL2O;delete [] LH2O;delete [] HL2O;delete [] HH2O;
   delete [] LLP;delete [] LHP;delete [] HLP;delete [] HHP;delete [] LLP2;delete [] LHP2;delete [] HLP2;delete [] HHP2;
   delete [] UM; delete [] VM;
   delete [] madU0; delete [] madV0; delete [] madV;delete [] madU;
   delete [] mad0LL;delete [] mad0LH;delete [] mad0HL;delete [] mad0HH;delete [] madLL;delete [] madLH;delete [] madHL;delete [] madHH;

   delete [] madLLs;delete [] madLHs;delete [] madHLs;delete [] madHHs;delete [] madLL2s;delete [] madLH2s;delete [] madHL2s;delete [] madHH2s;

   delete [] madLL2;delete [] madLH2;delete [] madHL2;delete [] madHH2; delete [] mad0LL2;delete [] mad0LH2;delete [] mad0HL2;delete [] mad0HH2;

   delete [] U; delete [] V;delete [] R;delete [] G; delete [] B; delete [] UFO; delete [] VFO;

   delete [] UO; delete [] VO;delete [] RO;delete [] GO; delete [] BO;delete [] XO;delete [] UF; delete [] VF;
   
   /* TR START *
   delete [] RAM; delete [] ARAM; /* TR END */ delete [] X; delete [] XP;delete [] XC;delete [] YT; delete [] YS; delete [] D;

   delete[] Lap_p; delete[] Lap_kurtosis; delete [] alphaI; delete [] alphaII;

   /* TR START *
   fclose(fp);fclose(fp1);fclose(fp2);fclose(fp3);fclose(fp4);fclose(fp5);fclose(fMSE);fclose(fSM);fclose(flum);fclose(fp_ram);/* TR END */

}
